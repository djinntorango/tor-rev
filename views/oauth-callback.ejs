<!-- views/oauth-callback.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enter Email</title>
    <link id="favicon" rel="icon" href="https://cdn.glitch.global/887fed5c-3c1b-472d-8fdc-c2a3bad1fe27/oillamp(powderblue).svg?v=1709088268120" type="image/x-icon">
    <link rel="stylesheet" type="text/css" href="https://torango-exporter.glitch.me/public/styles.css" />
  <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LRS5LVL8ED"></script>
  
</head>
<body>
    <header>
        <h1>List of Articles</h1>
    </header>
    <main>
        <section>
            <table>
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Created At</th>
                        <th>Edited At</th>
                        <th>Revise</th>
                    </tr>
                </thead>
                <tbody>
                    <% articles.forEach(article => { %>
                        <tr>
                            <td id="art"><a href="<%= article.html_url %>"><%= article.title %></a></td>
                            <td id="art"><%= new Date(article.created_at).toLocaleString() %></td>
                            <td id="art"><%= new Date(article.edited_at).toLocaleString() %></td>
                            <td id="art"><button>Revise</button></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </section>
                <div id="pagination-buttons">
                <button id="prev-button">Previous</button>
                <span id="page-num">Page 1</span>
                <button id="next-button">Next</button>
            </div>
    </main>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            let pageNum = 1;
            const pageSize = 10; // Number of articles per page

            const prevButton = document.getElementById("prev-button");
            const nextButton = document.getElementById("next-button");
            const pageNumSpan = document.getElementById("page-num");
            const articlesBody = document.getElementById("art");

 // Function to retrieve a list of help center articles
async function getHelpCenterArticles(pageNum) {
  const subdomain = process.env.SUBDOMAIN;
  try {
    // Use the initializeDatabase function from sqlite.js and retrieve token
    const db = await initializeDatabase();
    const access_token = await getAccessToken(db);

    // Ensure there is a valid access token
    if (!access_token) {
      console.error("Access token not found in the database.");
      return null; // Return null to indicate that no articles were fetched
    }

    // Build the Zendesk API endpoint
    const zendeskEndpoint = `https://${subdomain}.zendesk.com/api/v2/help_center/articles.json?page[size]=10&page=${pageNum}`;
    let allArticles = []; // Array to store all articles
    let fetchedArticlesCount = 0;

      // Make the API request with the retrieved access token
      const response = await axios.get(zendeskEndpoint, {
        headers: {
          Authorization: `Bearer ${access_token}`,
        },
        params: {
          sort_by: "updated_at",
          sort_order: "asc",
        },
      });

      const articles = response.data.articles;

      // Add fetched articles to the array & update count
      allArticles = allArticles.concat(articles);
      fetchedArticlesCount += articles.length;
    

    // Return only the required number of articles
    return allArticles;
    
  } catch (error) {
    console.error(
      "Error fetching and processing help center articles:",
      error.message
    );
    return null; // Return null to indicate that an error occurred
  }
}


            // Function to render articles in the table
            function renderArticles(articles) {
                articlesBody.innerHTML = ""; // Clear existing articles
                articles.forEach(article => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td><a href="${article.html_url}">${article.title}</a></td>
                        <td>${new Date(article.created_at).toLocaleString()}</td>
                        <td>${new Date(article.edited_at).toLocaleString()}</td>
                        <td><button>Revise</button></td>
                    `;
                    articlesBody.appendChild(row);
                });
            }

            // Function to update pagination UI
            function updatePaginationUI() {
                pageNumSpan.textContent = `Page ${pageNum}`;
            }

            // Function to handle previous button click
            prevButton.addEventListener("click", async function () {
                if (pageNum > 1) {
                    pageNum--;
                    const articles = await getHelpCenterArticles(pageNum);
                    renderArticles(articles);
                    updatePaginationUI();
                }
            });

            // Function to handle next button click
            nextButton.addEventListener("click", async function () {
                pageNum++;
                const articles = await getHelpCenterArticles(pageNum);
                renderArticles(articles);
                updatePaginationUI();
            });

            // Initial fetch and render
            const articles = await getHelpCenterArticles(pageNum);
            renderArticles(articles);
            updatePaginationUI();
        });
    </script>
</body>
</html>
